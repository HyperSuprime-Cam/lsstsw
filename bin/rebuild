#!/bin/bash
#
# ********** DONT RUN THIS UNLESS YOU UNDERSTAND WHAT IT DOES ********
# **********             SERIOUS DAMAGE MAY OCCUR             ********
#
# Recursively build all product, starting with top-level ones listed in
# $PRODUCTS.
#
# The versiondb repository should be cloned from:
#
#   https://github.com/lsst/versiondb.git
#   git@github.com:lsst/versiondb.git
#
# For creation, use:
#
#     (mkdir versiondb; cd versiondb; git init; mkdir dep_db ver_db manifests)
#

set -e
DIR=$(cd "$(dirname "$0")"; pwd)
. "${DIR}/../etc/settings.cfg.sh"

usage() { echo "Usage: $0 [-p] [-n] [-u] [-r <ref> [-r <ref2> [...]]] [-t <eupstag>] [product1 [product2 [...]]]" 1>&2; exit 1; }

while getopts ":pnur:t:" o; do
    case "$o" in
    p)
        PREP_ONLY=1
        ;;
    n)
        NO_FETCH=1
        ;;
    u)
        UPDATE=1
        ;;
    r)
        REF="$REF --ref $OPTARG"
        ;;
    t)
        TAG="$OPTARG"
        ;;
    *)
        usage
        ;;
    esac
done
shift $((OPTIND-1))

if [[ "$#" != "0" ]]; then
    PRODUCTS=("$@")
fi

#echo REF=$REF
#echo PREP_ONLY=$PREP_ONLY
#echo TAG=$TAG
#echo PRODUCTS=$PRODUCTS

(
    # true if `lsst-build prepare` has run successfully
    PREPARED=false

    #
    # Add 128 to non-zero exit statuses if the `lsst-build prepare` subcommand has
    # completed.  This is to allow consumer scripts to be able to determine if a
    # failure in this script occurred before or after the prepare step.
    #
    cleanup() {
        local rv=$?

        [[ $rv == 0 ]] && exit
        [[ $PREPARED == true ]] && [[ $rv -lt 128 ]] && rv=$((rv + 128))

        exit $rv
    }

    trap cleanup EXIT

    flock-fd 200 || { echo "a rebuild is already in process." 1>&2; exit 1; }
    #
    # update repos.yaml file
    #
    if [[ $UPDATE == 1 ]]; then
        curl -# -L --silent -o "$REPOSFILE" "$REPOSFILE_URL"
    fi

    #
    # Prepare build
    #
    VERSIONDBHEAD=$(cd "$VERSIONDB" && git rev-parse HEAD)
    [[ -z $NOPUSH ]] && (cd "$VERSIONDB" && git pull --quiet)

    ARGS=()
    if [[ $NO_FETCH == 1 ]]; then
        ARGS+=("--no-fetch")
    fi
    ARGS+=("--repos=${REPOSFILE}")
    ARGS+=("--exclusion-map=${EXCLUSIONS}")
    ARGS+=("--version-git-repo=${VERSIONDB}")
    ARGS+=("$LSSTSW_BUILD_DIR")
    if [[ ! -z "$REF" ]]; then
        # XXX intentionally not quoted to allow word splitting
        ARGS+=($REF)
    fi
    ARGS+=(${PRODUCTS[@]})

    lsst-build prepare "${ARGS[@]}"

    [[ -z $NOPUSH && "$VERSIONDBHEAD" != $(cd "$VERSIONDB" && git rev-parse HEAD) ]] && (cd "$VERSIONDB" && git push && git push --tags)

    eval "$(grep -E '^BUILD=' "$LSSTSW_BUILD_DIR"/manifest.txt)"
    echo "# BUILD ID: $BUILD"

    if [[ "$PREP_ONLY" == 1 ]]; then
        exit
    fi

    PREPARED=true

    #
    # HACK: Speed up the build by assuming EUPS caches are up-to-date
    # Make sure they really are first.
    #
    _EUPS_ASSUME_CACHES_UP_TO_DATE=0 python -c "import eups; eups.Eups()"
    export _EUPS_ASSUME_CACHES_UP_TO_DATE=1

    #
    # Execute build
    #
    lsst-build build "$LSSTSW_BUILD_DIR"

    #
    # Tag as requested
    #
    if [[ ! -z $TAG ]]; then
        eups-copy-tag "$BUILD" "$TAG"
    fi

    echo "# BUILD $BUILD completed."
) 200>"$DIR/../var/run/rebuild.run"
